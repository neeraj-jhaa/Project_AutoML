pip install optuna
from datasets import load_dataset
import pandas as pd


# Load SMS Spam dataset from Hugging Face
dataset = load_dataset("sms_spam")
df = pd.DataFrame(dataset['train'])
df.head()
from sklearn.model_selection import train_test_split


X_train, X_test, y_train, y_test = train_test_split(
    df['sms'], df['label'], test_size=0.2, random_state=42, stratify=df['label']
)
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report


baseline_pipeline = Pipeline([
    ("tfidf", TfidfVectorizer(stop_words="english", ngram_range=(1,2))),
    ("clf", LogisticRegression(max_iter=200))
])


baseline_pipeline.fit(X_train, y_train)
preds = baseline_pipeline.predict(X_test)
print(classification_report(y_test, preds))
from sklearn.naive_bayes import MultinomialNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import LinearSVC
from sklearn.model_selection import cross_val_score
import matplotlib.pyplot as plt


models = {
    "LogisticRegression": LogisticRegression(max_iter=200),
    "MultinomialNB": MultinomialNB(),
    "LinearSVC": LinearSVC(),
    "RandomForest": RandomForestClassifier(n_estimators=100)
}


scores = {}
for name, model in models.items():
    pipeline = Pipeline([
        ("tfidf", TfidfVectorizer(stop_words="english", ngram_range=(1,2))),
        ("clf", model)
    ])
    f1 = cross_val_score(pipeline, X_train, y_train, cv=5, scoring='f1').mean()
    scores[name] = f1
    print(name, "F1-score:", f1)




plt.bar(scores.keys(), scores.values())
plt.title("Model Comparison - F1 Score")
plt.ylabel("F1 Score")
plt.show()
import optuna


def objective(trial):
    ngram_max = trial.suggest_int("ngram_max", 1, 2)
    min_df = trial.suggest_int("min_df", 1, 5)
    C = trial.suggest_float("C", 0.1, 10.0, log=True)
   
    pipeline = Pipeline([
        ("tfidf", TfidfVectorizer(ngram_range=(1, ngram_max), min_df=min_df, stop_words="english")),
        ("clf", LinearSVC(C=C))
    ])
   
    return cross_val_score(pipeline, X_train, y_train, cv=5, scoring="f1").mean()


study = optuna.create_study(direction="maximize")
study.optimize(objective, n_trials=20)
print("Best parameters:", study.best_params)
best_params = study.best_params
final_pipeline = Pipeline([
    ("tfidf", TfidfVectorizer(
        ngram_range=(1, best_params["ngram_max"]),
        min_df=best_params["min_df"],
        stop_words="english"
    )),
    ("clf", LinearSVC(C=best_params["C"]))
])


final_pipeline.fit(X_train, y_train)
from sklearn.metrics import classification_report
import joblib


# Evaluate
preds_final = final_pipeline.predict(X_test)
print("\nFinal Model Performance on Test Data:")
print(classification_report(y_test, preds_final))


# Save
joblib.dump(final_pipeline, "sms_spam_model.joblib")
print("Model saved as sms_spam_model.joblib")
